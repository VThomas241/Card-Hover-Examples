*,*::before,*::after{
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

img,picture{
    display: block;
    max-width: 100%;
    object-fit: cover;
}

input,textarea,button{
    border: 0;
    background-color: transparent;
    font-size: inherit;
    font-family: inherit;
    font-weight: inherit;
}
div{
    border-radius: 0.5em;
}
.container{
    background-color: rgb(23, 23, 62);
    min-height: 100vh;
    padding: 2em;
    gap: 2em;
    isolation: isolate;
}

.cursor{
    position: absolute;
    border-radius: 50em;
    width: 50px;
    height: 50px;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
    background-color: cornflowerblue;
    // offsetX/Y is calculated relative to the target you're hovering.
    // When the #cursor comes under your mouse, the coordinates are relative to 
    // it (hence, small values), so it goes back to the top left,
    // then the offset is high again, so it comes back, and so on.
    // But you can disable pointer-events on this cursor to make it work.
    pointer-events: none;
}
@keyframes center {
    100%{
        top: 50%;
        left: 50%;
        transform: translate(-50%,-50%);
    }
}

.cursor_center{
    animation: center 1s ease forwards ;
}
.hover-cards{
    display: flex;
    gap: 2em;
    margin-top: 2em;
}
.card{
    width: 300px;
    height: 500px;
    position: relative;
    padding: 2em;
    border-radius: 0.5em;
    color: white;
    background-image: linear-gradient(to top, rgba(0,0,0,0.5), rgba(0,0,0,0.2));
    overflow: hidden;

    &::after{
        content: '';
        border-radius: inherit;
        position: absolute;
        inset: 0;
        background-image: 
            url(/mountain.jpg);
        background-size: 110% 110%;
        background-position: center top;
        z-index: -1;
        transition: background-position 0.6s ease;
    }

    $delay: 0.5s;

    h2{
        margin-bottom: 1em;
        transform: translateY(17em);
        transition: transform $delay ease;

    }
    p{
        line-height: 1.5;
        transform: translateY(26em);
        opacity: 0;
        transition: 
            transform $delay ease 0s,
            opacity $delay ease;
    }

    &:hover{
        &::after{
            background-position: center bottom;
        }
        h2{
            transform: translateY(0);
        }
        p{
            transition-delay: 0.1s;
            transform: translateY(0);
            opacity: 1;
        }
    }
}


.card-2{
    position: relative;
    width: 100%;
    height: 300px;
    grid-column: span 3;
    background-color: rgb(28, 61, 122);
}
.card-3{
    width: 300px;
    height: 500px;
    $angle: 35deg;
    $time: 0.6s;
    position: relative;
    perspective: 900px;

    &::after{
        content: '';
        position: absolute;
        z-index: -1;
        inset: 0px;
        bottom: -10px;

        opacity: 0;
        background-color: black;
        filter: blur(1em);
        transform-style: preserve-3d;
        transition: 
            transform $time ease,
            opacity $time ease;

    }

    & .cover{
        position: absolute;
        inset: 0;
        background-image: url(../public/advanced-hover/dark_rider-cover.jpg);
        background-repeat: no-repeat;
        background-size: cover;
        z-index: 1;
        transition: transform $time ease;
    }
    & .cover-shadow{
        position: absolute;
        inset: 0;
        z-index: 2;
        background-image: radial-gradient(transparent 30%,black);
        opacity: 0;
        transition: 
        transform $time ease,
        opacity $time ease;
    }
    & .character{
        // scale: 0.98;
        z-index: 3;
        position: absolute;
        inset: 0;
        background-image: 
        url(../public/advanced-hover/dark_rider-character.webp);
        background-position: center;
        background-size: cover;
        opacity: 0;
        transition: 
            transform $time ease,
            opacity $time ease;

    }
    & .title{
        z-index: 10;
        bottom: 0;
        width: 70%;
        left: 50%;
        translate: -50% -1em;
        position: absolute;
        transition: transform $time ease;
    }
    &:hover::after{
        opacity: 1;
        transform: rotateX($angle);
    }
    &:hover .cover{
        transform: rotateX($angle);
    }
    &:hover .cover-shadow{
        opacity: 1;
        transform: rotateX($angle);
    }
    &:hover .character{
        opacity: 1;
        transform: translateY(-7em);
    }
    &:hover .title{
        transform: translateY(-3em);
    }
}